<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="breaks" xml:space="preserve">
    <value>Breaks</value>
  </data>
  <data name="duration.not.allowed" xml:space="preserve">
    <value>The duration must be 24 hours or less.</value>
  </data>
  <data name="duration.not.defined" xml:space="preserve">
    <value>The duration is not defined.</value>
  </data>
  <data name="end.earlier.than.start" xml:space="preserve">
    <value>Starting time of {0} must be earlier than {1}.</value>
  </data>
  <data name="name.not.defined" xml:space="preserve">
    <value>The name is not defined.</value>
  </data>
  <data name="nonworking.period.already.exists" xml:space="preserve">
    <value>Non-working period {0} has already been created.</value>
  </data>
  <data name="period.end" xml:space="preserve">
    <value>End</value>
  </data>
  <data name="period.start" xml:space="preserve">
    <value>Start</value>
  </data>
  <data name="rotation.already.exists" xml:space="preserve">
    <value>Rotation {0} has already been created.</value>
  </data>
  <data name="rotation.days" xml:space="preserve">
    <value>Days in rotation</value>
  </data>
  <data name="rotation.duration" xml:space="preserve">
    <value>Rotation duration</value>
  </data>
  <data name="rotation.off" xml:space="preserve">
    <value>off</value>
  </data>
  <data name="rotation.on" xml:space="preserve">
    <value>on</value>
  </data>
  <data name="rotation.percentage" xml:space="preserve">
    <value>Percentage worked</value>
  </data>
  <data name="rotation.periods" xml:space="preserve">
    <value>Rotation periods</value>
  </data>
  <data name="rotation.start" xml:space="preserve">
    <value>Rotation start</value>
  </data>
  <data name="rotation.working" xml:space="preserve">
    <value>Scheduled working time</value>
  </data>
  <data name="schedule" xml:space="preserve">
    <value>Schedule</value>
  </data>
  <data name="schedule.coverage" xml:space="preserve">
    <value>Total team coverage</value>
  </data>
  <data name="schedule.non" xml:space="preserve">
    <value>Non-working periods</value>
  </data>
  <data name="schedule.shifts" xml:space="preserve">
    <value>Shifts</value>
  </data>
  <data name="schedule.teams" xml:space="preserve">
    <value>Teams</value>
  </data>
  <data name="schedule.total" xml:space="preserve">
    <value>Total non-working time</value>
  </data>
  <data name="schedule.working" xml:space="preserve">
    <value>Scheduled working time</value>
  </data>
  <data name="shift" xml:space="preserve">
    <value>Shift</value>
  </data>
  <data name="shift.already.exists" xml:space="preserve">
    <value>Shift {0} has already been created.</value>
  </data>
  <data name="shift.in.use" xml:space="preserve">
    <value>Shift {0} is being used in a work schedule.</value>
  </data>
  <data name="shift.spans.midnight" xml:space="preserve">
    <value>Shift {0} spans midnight and the working time between {1} and {2} is ambiguous.</value>
  </data>
  <data name="shifts.day" xml:space="preserve">
    <value>Day</value>
  </data>
  <data name="shifts.non.working" xml:space="preserve">
    <value>No working shifts</value>
  </data>
  <data name="shifts.working" xml:space="preserve">
    <value>Working shifts</value>
  </data>
  <data name="start.not.defined" xml:space="preserve">
    <value>The start time is not defined.</value>
  </data>
  <data name="team" xml:space="preserve">
    <value>Team</value>
  </data>
  <data name="team.already.exists" xml:space="preserve">
    <value>Team {0} has already been created.</value>
  </data>
  <data name="team.hours" xml:space="preserve">
    <value>Average hours worked per week</value>
  </data>
  <data name="team.members" xml:space="preserve">
    <value>Members:</value>
  </data>  
  <data name="member.id" xml:space="preserve">
    <value>ID</value>
  </data>   
</root>